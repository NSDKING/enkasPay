type Account @model @auth(rules: [{allow: public}]) {
  id: ID!
  mail: AWSEmail
  passe: String
  profil: String
  endDateAccount: AWSDate
  pin: String
  endDateProfil: AWSDate
  userID: ID @index(name: "byUser")
  free: Boolean
  service: String
}

type BuyRoom @model @auth(rules: [{allow: public}]) {
  id: ID!
  productbuy: [Product] @hasMany(indexName: "byBuyRoom", fields: ["id"])
  users: [User] @manyToMany(relationName: "UserBuyRoom")
}

type LikeRoom @model @auth(rules: [{allow: public}]) {
  id: ID!
  productLike: [Product] @hasMany(indexName: "byLikeRoom", fields: ["id"])
  users: [User] @manyToMany(relationName: "UserLikeRoom")
}

type DurationPrice {
  one_month: Int
  three_month: Int
  one_year: Int
}

type Product @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  image: String
  type: String
  price: DurationPrice
  buycount: Int
  likecount: Int
  likeroomID: ID @index(name: "byLikeRoom")
  buyroomID: ID @index(name: "byBuyRoom")
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  FamilyName: String
  LastName: String
  phoneNumber: String
  city: String
  mail: AWSEmail
  Accounts: [Account] @hasMany(indexName: "byUser", fields: ["id"])
  BuyRooms: [BuyRoom] @manyToMany(relationName: "UserBuyRoom")
  LikeRooms: [LikeRoom] @manyToMany(relationName: "UserLikeRoom")
  staff: Boolean
  birthdate: AWSDate
}
 
 
















import Card from "../components/card"
import Cate from "../components/categories"
import Navbar from "../components/navbar"
import Carrousel from "../components/carroussel"
import "./css/store.css"
import ps from "./img/pscard.jpg"
import spo from "./img/spotifyz.png"
import xbox from "./img/xbox_card-removebg-preview.png"
import pv from "./img/prime.png"
import disney from "./img/disney.png"
import vpn from "./img/vpn.png"
import net from './img/netim.png'
import { useEffect, useState } from "react"
import { API, Auth, graphqlOperation } from "aws-amplify"
import { listProducts } from "../graphql/queries"
import { getCommonLikeRoomWithUser } from "../services/LikeRoom"
import { createLikeRoom, createLikeRoomProduct, deleteProduct, updateLikeRoom } from "../graphql/mutations"

  
 export default function StorePage({Articles, setArticles,setProdTitle,setProdPrice, setProdType, setProdCover, cart, updateCart}) {
  const [loading, setLoading] = useState(false)
   function CoverImage(slug){
    if(slug == 'net'){
      return net
    }
    if(slug == 'pv'){
      return pv
    }
    if(slug == 'psn'){
      return ps
    }
    if(slug == 'xbox'){
      return xbox
    }
    if(slug == 'spo'){
      return spo
    }
    if(slug == 'disney'){
        return disney
      }
    if(slug == 'vpn'){
        return vpn
      }
   
  
  }
    const getProduct = async()=>{
        if(loading){
          return;
      }
      
      setLoading(true)
      try {
      
        const response= await API.graphql(graphqlOperation(listProducts));
        setArticles(response.data.listProducts.items)

        for (let i = 0; i < response.data.listProducts.items.length; i++) {
          if(response.data.listProducts.items[i].name==null){
              console.log(response.data.listProducts.items[i].name)

                const input = {
                  id: response.data.listProducts.items[i].id
                };

                const result = await API.graphql(graphqlOperation(deleteProduct, { input }));
                console.log(result)
                console.log("c'est regle")
          }
        }

     
      }catch(e){
              console.log(e)
    
      }
      setLoading(false)
     
      }

    useEffect(
        () => {
           getProduct()
         },
        [],
      )

    const createALikeRoomWithTheUser = async(product)=>{
      // check if the product is already in the cart
      const existingLikeRoom = await getCommonLikeRoomWithUser(product.id);
      if (existingLikeRoom) {
        const input = { 
          id: existingLikeRoom.likeRoom.id,
          _version: existingLikeRoom.likeRoom._version,   
          number: existingLikeRoom.likeRoom.number + 1,
        };
        const result = await API.graphql(graphqlOperation(updateLikeRoom, { input: input }));
        console.log(result)
        return;
      }
      //create a new LikeRooms
      const AuthUser = await Auth.currentAuthenticatedUser();
      const newLikeRoomData  = await API.graphql(
        graphqlOperation(createLikeRoom, {input:{}})
        )
        if(!newLikeRoomData.data?.createRoomsubject){
          console.log('error creating the chat error')
        }
        const newLikeRoom = newLikeRoomData.data?.createRoomsubject;

      //add the cliked product to the LikeRooms
    /**  await API.graphql(
        graphqlOperation(createLikeRoomProduct,{
          input:{likeRoomId:newLikeRoom.id, productId:product.id},
        })
        
      ) */
      //add the auth user to the LikeRooms
 /**     await API.graphql(
      graphqlOperation(createUserRoomsubject,{
        input:{roomsubjectId:newSubjectRoom.id, userId:AuthUser.attributes.sub},
      })
  ) */
    }

    return(
        <section className="storePage">
            <Navbar/>
            <div className="marge"></div>
            <Carrousel></Carrousel>
            <h3>categories populaire</h3>
            <Cate></Cate>
            <h3>playstation</h3>

<section className="BoxCard-mobile">
    {  
          Articles.filter(Article =>{
          if (Article.name.toLowerCase().includes("psn".toLowerCase())) {
                  return Article;
                }     
            }).map((Article, index) =>(
              <Card
              key={index}
              cover={CoverImage(Article.image)}
              title={Article.name}
              price={Article.price}
              type={Article.type}
              setProdTitle={setProdTitle}
              setProdPrice={setProdPrice}
              setProdType={setProdType}
              setProdCover={setProdCover}
              cart={cart}
              updateCart={updateCart}
              />     
            ))

      }

</section>
<h3>xbox</h3>

<section className="BoxCard-mobile">
{  
          Articles.filter(Article =>{
          if (Article.name.toLowerCase().includes("xbox".toLowerCase()) ) {
                  return Article;
                }     
            }).map((Article, index) =>(
                <Card
              key={index}
              cover={CoverImage(Article.image)}
              title={Article.name}
              price={Article.price}
              type={Article.type}
              setProdTitle={setProdTitle}
              setProdPrice={setProdPrice}
              setProdCover={setProdCover}
              setProdType={setProdType}
              cart={cart}
              updateCart={updateCart}
              />     
            ))

      }

      
  </section>
  <h3>netflix</h3>
  
  <section className="BoxCard-mobile">
  {  
          Articles.filter(Article =>{
          if (Article.name.toLowerCase().includes("netflix".toLowerCase())) {
                  return Article;
                }     
            }).map((Article, index) =>(
                <Card
                    key={index}
                    cover={CoverImage(Article.image)}
                    title={Article.name}
                    price={Article.price}
                    type={Article.type}
                    setProdTitle={setProdTitle}
                    setProdPrice={setProdPrice}
                    setProdCover={setProdCover}
                    cart={cart}
                    updateCart={updateCart}
                    setProdType={setProdType}

              />     
              
            ))

      }

     
  </section>
    <h3>spotify</h3>

    <section className="BoxCard-mobile">

    {  
            Articles.filter(Article =>{
            if (Article.name.toLowerCase().includes("spotify".toLowerCase())  ) {
                    return Article;
                    }     
                }).map((Article, index) =>(
                    <Card
                key={index}
                cover={CoverImage(Article.image)}
                title={Article.name}
                price={Article.price}
                type={Article.type}
                setProdTitle={setProdTitle}
                setProdPrice={setProdPrice}
                setProdCover={setProdCover}
                setProdType={setProdType}
                cart={cart}
                updateCart={updateCart}
                />     
                ))

        }

    </section>
        <h3>disney +</h3>

    <section className="BoxCard-mobile">

    {  
            Articles.filter(Article =>{
            if (Article.name.toLowerCase().includes("disney".toLowerCase())  ) {
                    return Article;
                    }     
                }).map((Article, index) =>(
                    <Card
                key={index}
                cover={CoverImage(Article.image)}
                title={Article.name}
                price={Article.price}
                type={Article.type}
                setProdTitle={setProdTitle}
                setProdPrice={setProdPrice}
                setProdCover={setProdCover}
                setProdType={setProdType}
                cart={cart}
                updateCart={updateCart}
                />     
                ))

        }

    </section>

    <h3>vpn</h3>

<section className="BoxCard-mobile">

{  
        Articles.filter(Article =>{
        if (Article.name.toLowerCase().includes("vpn".toLowerCase())  ) {
                return Article;
                }     
            }).map((Article, index) =>(
                <Card
            key={index}
            cover={CoverImage(Article.image)}
            title={Article.name}
            price={Article.price}
            type={Article.type}
            setProdTitle={setProdTitle}
            setProdPrice={setProdPrice}
            setProdCover={setProdCover}
            setProdType={setProdType}
            cart={cart}
            updateCart={updateCart}
            />     
            ))

    }

</section>
        </section>
    )

}





































import Card from "../components/card"
import Cate from "../components/categories"
import Navbar from "../components/navbar"
import Carrousel from "../components/carroussel"
import "./css/store.css"
import ps from "./img/pscard.jpg"
import spo from "./img/spotifyz.png"
import xbox from "./img/xbox_card-removebg-preview.png"
import pv from "./img/prime.png"
import disney from "./img/disney.png"
import vpn from "./img/vpn.png"
import net from './img/netim.png'
import { useEffect, useState } from "react"
import { API, Auth, graphqlOperation } from "aws-amplify"
import { listProducts } from "../graphql/queries"
import { getCommonLikeRoomWithUser } from "../services/LikeRoom"
import { createCartRoom, createLikeRoom, createLikeRoomProduct, createProductCartRoom, deleteProduct, updateCartRoom } from "../graphql/mutations"

  
 export default function StorePage({Articles, setArticles,setProdTitle,setProdPrice, setProdType, setProdCover, cart, updateCart}) {
  const [loading, setLoading] = useState(false)
   function CoverImage(slug){
    if(slug == 'net'){
      return net
    }
    if(slug == 'pv'){
      return pv
    }
    if(slug == 'psn'){
      return ps
    }
    if(slug == 'xbox'){
      return xbox
    }
    if(slug == 'spo'){
      return spo
    }
    if(slug == 'disney'){
        return disney
      }
    if(slug == 'VPN'){
        return vpn
      }
   
  
  }
    const getProduct = async()=>{
        if(loading){
          return;
      }
      
      setLoading(true)
      try {
      
        const response= await API.graphql(graphqlOperation(listProducts));
        setArticles(response.data.listProducts.items)

        for (let i = 0; i < response.data.listProducts.items.length; i++) {
          if(response.data.listProducts.items[i].name==null){
              console.log(response.data.listProducts.items[i].name)

                const input = {
                  id: response.data.listProducts.items[i].id
                };

                const result = await API.graphql(graphqlOperation(deleteProduct, { input }));
                console.log(result)
                console.log("c'est regle")
          }
        }

     
      }catch(e){
              console.log(e)
    
      }
      setLoading(false)
     
      }

    useEffect(
        () => {
           getProduct()
         },
        [],
      )

    const createALikeRoomWithTheUser = async(product)=>{
      // check if the product is already in the cart
      const existingLikeRoom = await getCommonLikeRoomWithUser(product.id);
      if (existingLikeRoom) {
        const input = { 
          id: existingLikeRoom.likeRoom.id,
          _version: existingLikeRoom.likeRoom._version,   
          number: existingLikeRoom.likeRoom.number + 1,
        };
        const result = await API.graphql(graphqlOperation(updateCartRoom, { input: input }));
        console.log(result)
        return;
      }
      //create a new LikeRooms and add it the auth user
      const AuthUser = await Auth.currentAuthenticatedUser();
      const newCartRoomData  = await API.graphql(
        graphqlOperation(createCartRoom, {input:{
          userID:AuthUser.attributes.sub
        }})
        )
        if(!newCartRoomData.data?.createRoomsubject){
          console.log('error creating the chat error')
        }
        const newCartRoom = newLikeRoomData.data?.createRoomsubject;

      //add the cliked product to the LikeRooms
    await API.graphql(
        graphqlOperation(createProductCartRoom,{
          input:{cartRoomId:newCartRoom.id, productId:product.id},
        })
        
      )  
    
    }

    return(
        <section className="storePage">
            <Navbar/>
            <div className="marge"></div>
            <Carrousel></Carrousel>
            <h3>categories populaire</h3>
            <Cate></Cate>
            <h3>playstation</h3>

<section className="BoxCard-mobile">
    {  
          Articles.filter(Article =>{
          if (Article.name.toLowerCase().includes("psn".toLowerCase())) {
                  return Article;
                }     
            }).map((Article, index) =>(
              <Card
              key={index}
              cover={CoverImage(Article.image)}
              title={Article.name}
              price={Article.price}
              type={Article.type}
              setProdTitle={setProdTitle}
              setProdPrice={setProdPrice}
              setProdType={setProdType}
              setProdCover={setProdCover}
              cart={cart}
              updateCart={updateCart}
              />     
            ))

      }

</section>
<h3>xbox</h3>

<section className="BoxCard-mobile">
{  
          Articles.filter(Article =>{
          if (Article.name.toLowerCase().includes("xbox".toLowerCase()) ) {
                  return Article;
                }     
            }).map((Article, index) =>(
                <Card
              key={index}
              cover={CoverImage(Article.image)}
              title={Article.name}
              price={Article.price}
              type={Article.type}
              setProdTitle={setProdTitle}
              setProdPrice={setProdPrice}
              setProdCover={setProdCover}
              setProdType={setProdType}
              cart={cart}
              updateCart={updateCart}
              />     
            ))

      }

      
  </section>
  <h3>netflix</h3>
  
  <section className="BoxCard-mobile">
  {  
          Articles.filter(Article =>{
          if (Article.name.toLowerCase().includes("netflix".toLowerCase())) {
                  return Article;
                }     
            }).map((Article, index) =>(
                <Card
                    key={index}
                    cover={CoverImage(Article.image)}
                    title={Article.name}
                    price={Article.price}
                    type={Article.type}
                    setProdTitle={setProdTitle}
                    setProdPrice={setProdPrice}
                    setProdCover={setProdCover}
                    cart={cart}
                    updateCart={updateCart}
                    setProdType={setProdType}

              />     
              
            ))

      }

     
  </section>
    <h3>spotify</h3>

    <section className="BoxCard-mobile">

    {  
            Articles.filter(Article =>{
            if (Article.name.toLowerCase().includes("spotify".toLowerCase())  ) {
                    return Article;
                    }     
                }).map((Article, index) =>(
                    <Card
                key={index}
                cover={CoverImage(Article.image)}
                title={Article.name}
                price={Article.price}
                type={Article.type}
                setProdTitle={setProdTitle}
                setProdPrice={setProdPrice}
                setProdCover={setProdCover}
                setProdType={setProdType}
                cart={cart}
                updateCart={updateCart}
                />     
                ))

        }

    </section>
        <h3>disney +</h3>

    <section className="BoxCard-mobile">

    {  
            Articles.filter(Article =>{
            if (Article.name.toLowerCase().includes("disney".toLowerCase())  ) {
                    return Article;
                    }     
                }).map((Article, index) =>(
                    <Card
                key={index}
                cover={CoverImage(Article.image)}
                title={Article.name}
                price={Article.price}
                type={Article.type}
                setProdTitle={setProdTitle}
                setProdPrice={setProdPrice}
                setProdCover={setProdCover}
                setProdType={setProdType}
                cart={cart}
                updateCart={updateCart}
                />     
                ))

        }

    </section>

    <h3>vpn</h3>

<section className="BoxCard-mobile">

{  
        Articles.filter(Article =>{
        if (Article.name.toLowerCase().includes("vpn".toLowerCase())  ) {
                return Article;
                }     
            }).map((Article, index) =>(
                <Card
            key={index}
            cover={CoverImage(Article.image)}
            title={Article.name}
            price={Article.price}
            type={Article.type}
            setProdTitle={setProdTitle}
            setProdPrice={setProdPrice}
            setProdCover={setProdCover}
            setProdType={setProdType}
            cart={cart}
            updateCart={updateCart}
            />     
            ))

    }

</section>
        </section>
    )

}






















import { useLocation, useNavigate } from "react-router-dom";
import './css/consultPage.css'
import { updateAccount } from "../graphql/mutations";
import { API, graphqlOperation } from "aws-amplify";
import { useState } from "react";
import { useForm, Controller } from "react-hook-form";
import { useEffect } from "react";
import { listUsers } from "../graphql/queries";


export default function UpdateAccount() {
    const { state } = useLocation();
    const { item } = state;
    const navigate = useNavigate();
    const [loading, setLoading] = useState(false)
    const {formState: {errors}, handleSubmit, register, control, setValue} = useForm();
    const [userList, setUserList] = useState([])

    const handleFormClick = async(data) => {
        if(loading){
            return;
        }
        
        setLoading(true)
        try {
            const input = { 
                id:item.id,
                mail: data.mail,
                profil: data.profil,
                passe:data.passe,
                endDateAccount:data.endDateAccount,
                endDateProfil:data.endDateProfil,
                pin:data.pin,
                numero:data.numero,
                userID:data.user,
                _version:data._version
                
              };
            navigate("/ConsultPage")
              
            console.log(input)
            console.log(item)
            alert('ok')
       
        }catch(e){
                console.log(e)
      
        }
        setLoading(false)
      }
      

    const getListUsers = async()=>{
        if(loading){
          return;
      }
      
      setLoading(true)
      try {
      
        const response= await API.graphql(graphqlOperation(listUsers));
        setUserList(response.data.listUsers.items)
     
      }catch(e){
              console.log(e)
    
      }
      setLoading(false)
     
      }

      useEffect(() => {
         getListUsers()
          
     }, [ ])
     
    return(
        <section>
                <div className="modal">
                            <div className="modal-content">
                            <form id="my-form"
                                    onSubmit={handleSubmit((data=>{handleFormClick(data)}))}>

                                <label for="mail">mail :</label>
                                <input 
                                    type="mail" 
                                    id="mail" 
                                    defaultValue={item.mail}
                                    {...register('mail', { required: 'ceci est obligatoire'})}

                                />

                                <label for="profil">profil :</label>
                                <input 
                                    type="text" 
                                    id="profil" 
                                    name="profil"
                                    defaultValue={item.profil}
                                    {...register('profil', { required: 'ceci est obligatoire'})}
                                    
                                    />

                                <label for="profil">passe :</label>
                                <input 
                                    type="text" 
                                    id="passe" 
                                    name="passe"
                                    defaultValue={item.passe}

                                    {...register('passe', { required: 'ceci est obligatoire'})}
                                    
                                    />

                                <label for="telephone">fin du profil :</label>
                                <input 
                                    type="date" 
                                    id="fin-abonnement" 
                                    name="fin-abonnement"
                                    defaultValue={item.endDateProfil}

                                    {...register('endDateProfil', { required: 'ceci est obligatoire'})}
                                    
                                    />

                                <label for="fin-abonnement">fin du compte :</label>
                                <input 
                                    type="date" 
                                    id="endAccount" 
                                    name="endAccount"
                                    defaultValue={item.endDateAccount}

                                    {...register('endDateAccount', { required: 'ceci est obligatoire'})}

                                        
                                    />

                                <label for="pin">pin :</label>
                                <input 
                                    type="number" 
                                    id="pin" 
                                    name="pin"
                                    defaultValue={item.pin}

                                    {...register('pin', { required: 'ceci est obligatoire'})}
                                    
                                    />

                                <label for="pin">utilisateur :</label>
                                <Controller
                                        name="user"
                                        control={control}
                                        defaultValue=""
                                        render={({ field }) => (
                                        <select {...field} >
                                            <option value="">Select...</option>
                                    
                                            {
                                                userList.map(item => (
                                                    <option value={item.id} key={item.id}>{item.FamilyName +" "+ item.LastName}</option>
                                                ))
                                            }
                                        </select>
                                        )}
                                    />
                                <label for="pin">free :</label>

                            <Controller
                                                    name="free"
                                                    control={control}
                                                    defaultValue=""
                                                    render={({ field }) => (
                                                    <select {...field} >
                                                        <option value={true}>true</option>
                                                        <option value={false}>false</option>
                                                
                                                
                                                    </select>
                                                    )}
                                                />

                                <input type="submit" id="add-client-btn"  />
                                </form>
                    <button onClick={()=>{ navigate("/ConsultPage")}}>close the page</button>

                             </div>
                        </div>

         </section>
    )
}




const response= await API.graphql(graphqlOperation(updateAccount, { input: input }));


One or more parameter values are not valid. A value specified for a secondary index key is not supported. The AttributeValue for a key attribute cannot contain an empty string value. IndexName: byUser, Inde